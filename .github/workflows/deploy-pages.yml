name: 部署到 GitHub Pages

on:
  push:
    branches: [main]
    paths:
      - "page/**"
      - "archive/**"
      - "archive/**/*.json"
      - ".github/workflows/deploy-pages.yml"
  
  # 定时执行 - 每天 UTC 2:00 (北京时间 10:00)
  schedule:
    - cron: "0 2 * * *"

  # 允许手动触发
  workflow_dispatch:

permissions:
  contents: write # 需要写权限来提交数据索引更新
  pages: write
  id-token: write

# 防止并发部署
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # 构建作业
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 检出代码仓库
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: ⚙️ 配置 Pages
        uses: actions/configure-pages@v4

      - name: 📂 复制数据到页面目录
        run: |
          # 将archive复制到page目录，使其可在GitHub Pages中访问
          if [ -d "archive" ]; then
            cp -r archive page/
            echo "✅ 数据文件已复制到page目录"
            
            # 验证复制结果
            echo "📊 复制统计:"
            echo "  - 国家目录数: $(ls page/archive | wc -l)"
            echo "  - JSON文件总数: $(find page/archive -name '*.json' | wc -l)"
            echo "  - 总文件大小: $(du -sh page/archive | cut -f1)"
            
            # 显示示例文件
            echo -e "\n📁 目录结构示例:"
            ls -la page/archive | head -5
            
            if [ -f "page/archive/China/2025-08-28.json" ]; then
              echo "✅ 测试文件存在: China/2025-08-28.json"
            else
              echo "⚠️ 测试文件不存在: China/2025-08-28.json"
            fi
          else
            echo "❌ 错误: archive 目录不存在"
            exit 1
          fi

      - name: 📊 检查当前数据状态
        run: |
          echo "=== Archive 目录状态检查 ==="
          if [ -d archive ]; then
            echo "✅ archive 目录存在"
            echo "📊 统计信息:"
            find archive -name "*.json" | wc -l | xargs echo "  - JSON文件总数:"
            ls -la archive/ | grep -E '^d' | wc -l | xargs echo "  - 国家目录数:"
            echo "  - 目录大小: $(du -sh archive | cut -f1)"
          else
            echo "❌ archive 目录不存在"
            echo "当前目录内容:"
            ls -la
            exit 1
          fi

          echo ""
          echo "=== 各国最新数据文件 ==="
          for country in archive/*/; do
            if [ -d "$country" ]; then
              country_name=$(basename "$country")
              file_count=$(find "$country" -name "*.json" | wc -l)
              latest_file=$(ls -1t "$country"*.json 2>/dev/null | head -1)
              if [ -n "$latest_file" ]; then
                echo "$country_name: $(basename "$latest_file") (共$file_count个文件)"
              else
                echo "$country_name: 无数据文件"
              fi
            fi
          done

          echo ""
          echo "=== 验证数据文件内容 ==="
          # 检查一个示例文件的内容
          sample_file=$(find archive -name "*.json" | head -1)
          if [ -n "$sample_file" ]; then
            echo "示例文件: $sample_file"
            echo "文件大小: $(wc -c "$sample_file" | cut -d' ' -f1) 字节"
            echo "文件内容预览:"
            head -10 "$sample_file" || echo "无法读取文件内容"
          fi

          echo ""
          echo "=== 当前 data-index.js 状态 ==="
          if [ -f "page/data-index.js" ]; then
            echo "✅ page/data-index.js 已存在"
            echo "文件大小: $(wc -c page/data-index.js | cut -d' ' -f1) 字节"
            # 提取生成时间
            grep -o "generated.*" page/data-index.js | head -1 || echo "未找到生成时间信息"
          else
            echo "❌ page/data-index.js 不存在"
          fi

      - name: 📝 生成数据索引
        run: |
          echo "🚀 开始生成数据索引..."
          
          # 检查必要的目录和文件
          echo "=== 环境检查 ==="
          echo "当前工作目录: $(pwd)"
          echo "scripts目录是否存在: $(test -d scripts && echo '✅ 存在' || echo '❌ 不存在')"
          echo "archive目录是否存在: $(test -d archive && echo '✅ 存在' || echo '❌ 不存在')"
          
          if [ -d scripts ]; then
            echo "scripts目录内容:"
            ls -la scripts/
          fi
          
          if [ -d archive ]; then
            echo "archive目录内容:"
            ls -la archive/ | head -5
            echo "archive中JSON文件总数: $(find archive -name '*.json' | wc -l)"
          else
            echo "❌ 错误: archive 目录不存在，无法生成数据索引"
            exit 1
          fi
          
          # 检查生成脚本是否存在
          if [ ! -f "scripts/generate-data-index.js" ]; then
            echo "❌ 错误: scripts/generate-data-index.js 不存在"
            echo "尝试列出所有.js文件:"
            find . -name "*.js" | grep -E "(generate|index)" || echo "未找到相关脚本"
            exit 1
          fi
          
          # 运行数据索引生成脚本
          echo "🚀 执行数据索引生成..."
          node scripts/generate-data-index.js
          
          # 验证生成结果
          echo ""
          echo "=== 验证生成结果 ==="
          if [ -f "page/data-index.js" ]; then
            echo "✅ data-index.js 生成成功"
            echo "文件大小: $(wc -c page/data-index.js | cut -d' ' -f1) 字节"
            echo ""
            echo "=== 生成的文件预览 ==="
            head -30 page/data-index.js
            echo ""
            echo "=== 文件末尾 ==="
            tail -10 page/data-index.js
          else
            echo "❌ 错误: data-index.js 未生成"
            echo "检查page目录内容:"
            ls -la page/ | head -10
            exit 1
          fi

      - name: 🔍 检查并提交数据索引更新
        id: check-and-commit
        run: |
          # 检查 data-index.js 是否有变化
          if git diff --quiet page/data-index.js; then
            echo "No changes detected in data-index.js"
            echo "has-index-changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected in data-index.js, committing updates..."
            echo "has-index-changes=true" >> $GITHUB_OUTPUT
            
            # 配置 Git
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            
            # 添加更改
            git add page/data-index.js
            
            # 创建提交信息
            COMMIT_MSG="🤖 Auto-update data index - $(date '+%Y-%m-%d %H:%M UTC')"
            git commit -m "$COMMIT_MSG"
            
            # 推送更改
            git push
            
            echo "✅ Data index changes committed and pushed successfully"
            
            echo ""
            echo "=== Changes preview ==="
            git --no-pager show --name-only HEAD
          fi

      - name: 🖼️ 优化图片和创建缩略图
        run: |
          # 这里可以添加图片优化逻辑（可选）
          echo "图片优化步骤（当前跳过）"

      - name: ✅ 验证网站文件
        run: |
          # 验证HTML和JSON文件
          echo "验证网站文件..."
          
          # 检查关键文件是否存在
          echo "🔍 验证关键文件..."
          test -f page/index.html || (echo "❌ 错误: index.html 不存在" && exit 1)
          test -f page/assets/css/style.css || (echo "❌ 错误: style.css 不存在" && exit 1)
          test -f page/assets/js/app.js || (echo "❌ 错误: app.js 不存在" && exit 1)
          test -f page/data-index.js || (echo "❌ 错误: data-index.js 不存在" && exit 1)
          test -d page/archive || (echo "❌ 错误: archive 目录不存在" && exit 1)
          
          echo "✅ 关键文件验证通过"
          
          # 显示最终的文件结构
          echo -e "\n📁 最终部署结构:"
          find page -type f | head -20 | sort
          
          # 验证JSON文件格式
          echo "验证 JSON 文件格式..."
          find page/archive -name "*.json" -exec node -e "
            try {
              JSON.parse(require('fs').readFileSync('{}', 'utf8'));
              console.log('✓ {}');
            } catch(e) {
              console.error('✗ {}: ' + e.message);
              process.exit(1);
            }
          " \;
          
          echo "验证通过！"

      - name: 🏗️ 使用 Jekyll 构建
        run: |
          # 为了兼容GitHub Pages，添加Jekyll配置
          cat > page/_config.yml << 'EOF'
          # GitHub Pages Jekyll 配置
          title: "必应壁纸展示平台"
          description: "浏览来自全球14个国家/地区的精美必应壁纸"
          baseurl: "/BingWallpaperCollector"
          url: "https://hippiezhou.github.io"
          
          # 排除文件
          exclude:
            - node_modules
            - package*.json
            - "*.md"
          
          # 包含隐藏文件
          include:
            - _headers
            - _redirects
          
          # 插件
          plugins:
            - jekyll-relative-links
          
          # 相对链接
          relative_links:
            enabled: true
            collections: true
          EOF
          
          # 创建.nojekyll文件以禁用Jekyll（如果需要纯静态站点）
          # touch page/.nojekyll

      - name: 📤 上传构建产物
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./page

  # 部署作业
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 🚀 部署到 GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # 通知作业（可选）
  notify:
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: always()
    steps:
      - name: 📢 通知部署状态
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ 部署成功!"
            echo "🌐 访问地址: https://hippiezhou.github.io/BingWallpaperCollector/"
          else
            echo "❌ 部署失败!"
          fi
